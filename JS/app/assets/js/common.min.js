var App = App || {};

App.utils = {
    addListener: null,
    removeListener: null
};

if (typeof window.addEventListener === "function") {
    App.utils.addListener = function (e, type, fn) {
        e.addEventListener(type, fn, false);
    }
    App.utils.removeListener = function (e, type, fn) {
        e.removeEventListener(type, fn, false);
    }
}

else if (typeof document.attachEvent === "function") {
    App.utils.addListener = function (e, type, fn) {
        e.attachEvent("on" + type, fn);
    }
    App.utils.removeListener = function (e, type, fn) {
        e.detachEvent("on" + type, fn);
    }
}

else {
    App.utils.addListener = function (e, type, fn) {
        e["on" + type] = fn;
    }
    App.utils.removeListener = function (e, type, fn) {
        e["on" + type] = null;
    }
}

App.utils.getStyle = function (elem) {
  return window.getComputedStyle ? getComputedStyle(elem, "") : elem.currentStyle;
}

/**
* https://learn.javascript.ru/metrics-window#ширина-высота-страницы-с-учётом-прокрутки
**/
App.utils.scrollWidth = function () {
	return Math.max(
	  // document.body.scrollWidth, document.documentElement.scrollWidth,
	  document.body.offsetWidth, document.documentElement.offsetWidth,
	  document.body.clientWidth, document.documentElement.clientWidth
	);
}

App.utils.debounce = function (func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};

App.utils.changeStyle = function (elem, styleName, styleValue) {
     try {
        elem.style[styleName] = styleValue;
      }
      catch(e) {
        elem.runtimeStyle[styleName] = styleValue;
        console.log(styleName + ':' + styleValue);
        // elem.setAttribute("style", styleName + ':' + styleValue);
    }
};
var App = App || {};

App.menu = (function () {
	//for mob
	var nav = document.querySelector(".js-nav");
	var mobMenuButton = document.querySelector(".js-mob-menu-button");
	var shoppingBag = document.querySelector(".js-shopping-bag");
	var html = document.querySelector("html");

	function _mobMenuButtonClick () {
		if( !nav.classList.contains('is-visible-menu') ) {
			nav.classList.add('is-visible-menu');
			shoppingBag.classList.add('is-hide-bag');
			mobMenuButton.classList.add('mob-menu-button_close');
			window.scrollTo(0,0);
			html.classList.add('is-not-scroll');
		} else {
			nav.classList.remove('is-visible-menu');
			shoppingBag.classList.remove('is-hide-bag');
			mobMenuButton.classList.remove('mob-menu-button_close');
			html.classList.remove('is-not-scroll');
		}
	}

	//for responsive
		function itemsWindth(items) {
			var itemsW = 0;
			for (var i = 0; i < items.length; i++)
				itemsW += items[i].clientWidth;
			return itemsW
		} 
		var navMoreButton = document.querySelector('.js-nav-more');
		var nav = document.querySelector('.js-nav');
		var navList = document.querySelector('.js-nav-elems');
		var navListMore = document.querySelector('.js-nav-elems-more');

		function _hideShowOneMenuItemForMob () {
			var navElems = document.querySelectorAll('.js-nav-elems > .js-nav-elem');
			var navW = nav.clientWidth;
			var navElemsW = itemsWindth(navElems);
			var navItemsMore = document.querySelectorAll('.js-nav-elems-more > .js-nav-elem');
			var lestVisible = navElems.length - 2;
			if (navElemsW > navW) {
				navListMore.insertBefore(navElems[lestVisible], navListMore.firstChild);
				App.utils.changeStyle(navMoreButton, 'display', 'inline-block');
				navElems = document.querySelectorAll('.js-nav-elems > .js-nav-elem');
				navElemsW = itemsWindth(navElems);
				lestVisible--;
				_hideShowOneMenuItemForMob();
			} else {
				if( navListMore.firstChild && (navW - navElemsW >= navListMore.firstChild.clientWidth) ) { //if there is enough free space
					navList.insertBefore(navListMore.firstChild, navMoreButton);
					_hideShowOneMenuItemForMob();
				} else if (navItemsMore.length === 1 && (navW + navMoreButton.clientWidth - navElemsW >= navListMore.firstChild.clientWidth) ) {// if remains one elem
					App.utils.changeStyle(navMoreButton, 'display', 'none');
					navList.insertBefore(navListMore.firstChild, navMoreButton);
				}
			}
		}
		function _ShowMenuItemForMobDesk () {
			var navItemsMore = document.querySelectorAll('.js-nav-elems-more > .js-nav-elem');
			var navItemsMoreLen = navItemsMore.length;
			if(navItemsMoreLen > 0) {
				for (var i = 0; i < navItemsMoreLen; i++) {
					navList.insertBefore(navListMore.firstChild, navMoreButton);
				}
				App.utils.changeStyle(navMoreButton, 'display', 'none');
			}
		}

		function _responsiveMenu () {
			console.log(App.utils.scrollWidth());
			if (App.utils.scrollWidth() > 768) {
				_hideShowOneMenuItemForMob();
			} else {
				_ShowMenuItemForMobDesk ();
			}
		}
	function _init() {
	  App.utils.addListener(mobMenuButton, 'click', _mobMenuButtonClick);

	  setTimeout(function () { //setTimeout because some browser does not have time to calculate the width
	  	App.utils.addListener(window, 'resize', _responsiveMenu);
	  	_responsiveMenu ();
	  }, 0);
	}
	return {  
	  init: _init
	}
})();

App.menu.init();
var App = App || {};

  App.carousel = (function () {
    
    var carousel = document.querySelector('.js-carousel'),
        list = carousel.querySelector('.js-carousel__elems'),
        listElems = carousel.querySelectorAll('.js-carousel__elem'),
        prevButton = document.querySelector('.js-carousel__arrow_prev'),
        nextButton = document.querySelector('.js-carousel__arrow_next'),
        carouselW = document.querySelector('.js-width-carousel'),
        position = 0, //the current shift to the left
        widthCarousel = carouselW.clientWidth,
        width = listElems[0].clientWidth;
        carouselElemCount =  (widthCarousel -  widthCarousel % width) / width;
        carouselElemCount = carouselElemCount < listElems.length ? carouselElemCount : listElems.length;
        // carouselW.style.width = carouselElemCount * width + 'px';
        App.utils.changeStyle(carouselW, 'width', carouselElemCount * width + 'px');
    function _leftShift() {
        position = Math.min(position + width, 0)
        // list.style.marginLeft = position + 'px';
        App.utils.changeStyle(list, 'marginLeft', position + 'px');
    };
    function _rightShift() {
        position = Math.max(position - width, -width * (listElems.length - carouselElemCount));
        // list.style.marginLeft = position + 'px';
        App.utils.changeStyle(list, 'marginLeft', position + 'px');
    };
    var _resize = App.utils.debounce(function () {
        // carouselW.style.width = 'auto';
        App.utils.changeStyle(carouselW, 'width', 'auto');
        widthCarousel = carouselW.clientWidth;
        width = listElems[0].clientWidth;
        carouselElemCount =  (widthCarousel -  widthCarousel % width) / width;
        carouselElemCount = carouselElemCount < listElems.length ? carouselElemCount : listElems.length;
        // carouselW.style.width = carouselElemCount * width + 'px';
        App.utils.changeStyle(carouselW, 'width', carouselElemCount * width + 'px');

        position = 0;
        // list.style.marginLeft = position;
        App.utils.changeStyle(list, 'marginLeft', position);
    }, 50)
    function _init() {
        App.utils.addListener(prevButton, 'click', _leftShift);
        App.utils.addListener(nextButton, 'click', _rightShift);
        App.utils.addListener(window, 'resize', _resize);
    }

    return {
      init: _init
    }

  })();
  App.carousel.init();

var App = App || {};
App.productCard = (function () {

	function _styleForPartPrice() {
		var pricePart;
		var productCardPrice = document.querySelectorAll('.js-product-card__price');
		for(var i = 0, len = productCardPrice.length; i < len; i++) {
			pricePart = productCardPrice[i].innerHTML.split('.');
			if(pricePart.length == 2)
				productCardPrice[i].innerHTML = pricePart[0] + '.' + '<span class="product-card__price-fraction">' + pricePart[1] + '</span>';
		}
	}

	return {
		styleForPartPrice: _styleForPartPrice
	}
})();

App.productCard.styleForPartPrice();